{"version":3,"file":"component---src-pages-index-js-fd7f70470db5c7abef53.js","mappings":"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","sources":["webpack://call/./src/pages/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst wordTypes = [\"noun\", \"verb\", \"adjective\", \"adverb\", \"preposition\"];\r\nconst cefrLevels = [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"];\r\n\r\nfunction Index() {\r\n    const [guessedCorrectly, setGuessedCorrectly] = useState(false);\r\n    const [displayedWord, setDisplayedWord] = useState(\"\");\r\n    const [definitions, setDefinitions] = useState([]);\r\n    const [hintIndex, setHintIndex] = useState(0);\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [wordType, setWordType] = useState(wordTypes[0]);\r\n    const [cefrLevel, setCefrLevel] = useState(cefrLevels[0]);\r\n    const [word, setWord] = useState(\"\");\r\n    const [hints, setHints] = useState([]);\r\n    const [activatedWordTypes, setActivatedWordTypes] = useState(\r\n        wordTypes.map(() => false)\r\n    );\r\n    const [activatedCefrLevels, setActivatedCefrLevels] = useState(\r\n        cefrLevels.map(() => false)\r\n    );\r\n\r\n\r\n    useEffect(() => {\r\n        const container = document.querySelector(\".container\");\r\n        const input = document.querySelector(\".input\");\r\n        console.log(word, input.value);\r\n        if (!word.empty && word === input.value) {\r\n            setHintIndex(word.length);\r\n            container.classList.add(\"wiggle\");\r\n        } else {\r\n            container.classList.remove(\"wiggle\");\r\n        }\r\n    }, [word]);\r\n\r\n    const handleWordTypeChange = (type) => {\r\n        const newActivatedWordTypes = wordTypes.map((_, index) => index === wordTypes.indexOf(type));\r\n        setActivatedWordTypes(newActivatedWordTypes);\r\n        setWordType(type);\r\n    };\r\n\r\n    const handleCefrLevelChange = (level) => {\r\n        const newActivatedCefrLevels = cefrLevels.map((_, index) => index === cefrLevels.indexOf(level));\r\n        setActivatedCefrLevels(newActivatedCefrLevels);\r\n        setCefrLevel(level);\r\n    };\r\n\r\n    const handleWordChange = (event) => {\r\n\r\n        console.log(word);\r\n        setUserInput(event.target.value.slice(0, word.length)); // Limit the input characters to the length of the word\r\n        setDisplayedWord(event.target.value.slice(0, word.length))\r\n        if (event.target.value.slice(0, word.length) === word) {\r\n            setGuessedCorrectly(true);\r\n        }\r\n        else {\r\n            setGuessedCorrectly(false);\r\n        }\r\n    };\r\n\r\n\r\n    const handleAddHint = () => {\r\n        if (definitions.length ===0){return;}\r\n        let newHint = definitions.pop();\r\n        if (newHint !== null && newHint !== \"no hints found in corpora\"){\r\n            setHints([...hints, `${newHint}`]);\r\n        }\r\n    };\r\n\r\n    const handleRandomWord = () => {\r\n        setGuessedCorrectly(false);\r\n        setDisplayedWord(\"\")\r\n        setUserInput(\"\");\r\n        setHintIndex(0);\r\n        setHints([]);\r\n        const url = `static/corpus.csv?wordType=${wordType}&cefrLevel=${cefrLevel}`;\r\n        fetch(url)\r\n            .then((response) => response.text())\r\n            .then((data) => {\r\n                const lines = data.split(\"\\n\");\r\n                const filteredLines = lines.filter((line) => {\r\n                    const fields = line.split(\",\");\r\n                    return (\r\n                        activatedWordTypes[wordTypes.indexOf(fields[1])] &&\r\n                        activatedCefrLevels[cefrLevels.indexOf(fields[2])]\r\n                    );\r\n                });\r\n                if (filteredLines.length > 0) {\r\n                    const randomIndex = Math.floor(Math.random() * filteredLines.length);\r\n                    const fields = filteredLines[randomIndex].split(\",\");\r\n                    const str = fields[0].trim().replace(/\"(.*)\"$/, \"$1\");\r\n                    setWord(str);\r\n                    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${str}`;\r\n                    fetch(url)\r\n                        .then((response) => response.json())\r\n                        .then((json_data) => {\r\n                            const def = [];\r\n                            for (const meaning of json_data[0][\"meanings\"]) {\r\n                                if (meaning[\"partOfSpeech\"] === \"noun\") { //todo: sort out selected pos\r\n                                    for (const defin of meaning[\"definitions\"]) {\r\n                                        let hintToAdd = defin[\"definition\"];\r\n                                        hintToAdd = hintToAdd.replace(new RegExp(`[^a-zA-Z0-9 ]`, \"g\"), \"\")\r\n                                        hintToAdd = hintToAdd.replace(word, \"#\".repeat(word.length));\r\n                                        console.log(hintToAdd);\r\n                                        def.push(hintToAdd);\r\n                                    }\r\n                                }\r\n                                console.log(def)\r\n                                if (def.length<2){\r\n                                    //handleRandomWord();\r\n                                    continue;\r\n                                }\r\n                                setDefinitions(def);\r\n                        }\r\n\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            handleRandomWord();\r\n                        });\r\n                } else {\r\n                    setWord(\"No Cefr & POS selected\");\r\n                }\r\n            });\r\n    };\r\n    const handleRevealNextLetter = () => {\r\n        const input = document.querySelector(\".input\");\r\n        const letters = word.split(\"\");\r\n        let newDisplayedWord = \"\";\r\n        if (letters.length > hintIndex) {\r\n            for (let i = 0; i < hintIndex + 1; i++) {\r\n                newDisplayedWord += letters[i];\r\n            }\r\n            setHintIndex(hintIndex + 1);\r\n        } else {\r\n            setHintIndex(0);\r\n        }\r\n        setDisplayedWord(newDisplayedWord); // Update the displayedWord\r\n        setUserInput(input.value);\r\n    };\r\n    return (\r\n    <div className=\"container\">\r\n        <h1 className=\"header-title\">Guess my Word</h1>\r\n        <div className=\"word-types\">\r\n            {wordTypes.map((type) => (\r\n                <button\r\n                    key={type}\r\n                    onClick={() => handleWordTypeChange(type)}\r\n                    className={`btn ${\r\n                        activatedWordTypes[wordTypes.indexOf(type)] ? \"active\" : \"\"\r\n                    }`}\r\n                    style={{\r\n                        backgroundColor: activatedWordTypes[wordTypes.indexOf(type)]\r\n                            ? \"#000000\"\r\n                            : \"#FFFFFF\",\r\n                        color: activatedWordTypes[wordTypes.indexOf(type)]\r\n                            ? \"#FFFFFF\"\r\n                            : \"#000000\",\r\n                    }}\r\n                >\r\n                    {type}\r\n                </button>\r\n            ))}\r\n        </div>\r\n        <div className=\"cefr-levels\">\r\n            {cefrLevels.map((level) => (\r\n                <button\r\n                    key={level}\r\n                    onClick={() => handleCefrLevelChange(level)}\r\n                    className={`btn ${\r\n                        activatedCefrLevels[cefrLevels.indexOf(level)] ? \"active\" : \"\"\r\n                    }`}\r\n                    style={{\r\n                        backgroundColor: activatedCefrLevels[cefrLevels.indexOf(level)]\r\n                            ? \"#000000\"\r\n                            : \"#FFFFFF\",\r\n                        color: activatedCefrLevels[cefrLevels.indexOf(level)]\r\n                            ? \"#FFFFFF\"\r\n                            : \"#000000\",\r\n                    }}\r\n                >\r\n                    {level}\r\n                </button>\r\n            ))}\r\n        </div>\r\n        <div className=\"input-container\">\r\n            <div className=\"input-display\">\r\n                {displayedWord.split(\"\").map((letter, index) => (\r\n                    <span\r\n                        key={index}\r\n                        className={`input-letter${guessedCorrectly ? \" rainbow\" : \"\"}`}\r\n                        disabled={word === displayedWord && word !== \"\"}\r\n                    >\r\n    {letter}\r\n</span>\r\n\r\n                ))}\r\n                {Array(Math.max(0, word.length - displayedWord.length))\r\n                    .fill(\"_\")\r\n                    .map((underline, index) => (\r\n                        <span key={index + displayedWord.length} className=\"input-underline\">\r\n      {underline}\r\n    </span>\r\n                    ))}\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                value={userInput}\r\n                onChange={handleWordChange}\r\n                className=\"input\"\r\n                autoComplete=\"new-password\"\r\n                //disabled={hintIndex > word.length || userInput === word}\r\n            />\r\n            <div className=\"button-container\">\r\n                <button\r\n                    onClick={handleRevealNextLetter}\r\n                    className=\"btn\"\r\n                    disabled={hintIndex >= word.length || userInput === word}\r\n                >\r\n                    Reveal Next Letter\r\n                </button>\r\n                <button\r\n                    onClick={handleRandomWord}\r\n                    className=\"btn\"\r\n\r\n                    disabled={hintIndex < word.length && userInput !== word && hints.length !== 0 }\r\n                >\r\n                    Random Word\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"hints-container\">\r\n            {hints.map((hint) => (\r\n                <p key={hint}>{hint}</p>\r\n            ))}\r\n            <button\r\n                onClick={handleAddHint}\r\n                className=\"btn\"\r\n                //disabled={hints.length<=0}\r\n            >\r\n                Add Hint\r\n            </button>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Index;\r\n"],"names":["wordTypes","cefrLevels","guessedCorrectly","setGuessedCorrectly","useState","displayedWord","setDisplayedWord","definitions","setDefinitions","hintIndex","setHintIndex","userInput","setUserInput","wordType","setWordType","cefrLevel","setCefrLevel","word","setWord","hints","setHints","activatedWordTypes","setActivatedWordTypes","map","activatedCefrLevels","setActivatedCefrLevels","useEffect","container","document","querySelector","input","console","log","value","empty","classList","remove","length","add","handleRandomWord","fetch","then","response","text","data","filteredLines","split","filter","line","fields","indexOf","str","Math","floor","random","trim","replace","json","json_data","def","meaning","defin","hintToAdd","RegExp","repeat","push","catch","error","className","type","key","onClick","newActivatedWordTypes","_","index","handleWordTypeChange","style","backgroundColor","color","level","newActivatedCefrLevels","handleCefrLevelChange","letter","disabled","Array","max","fill","underline","onChange","event","target","slice","autoComplete","letters","newDisplayedWord","i","hint","newHint","pop"],"sourceRoot":""}